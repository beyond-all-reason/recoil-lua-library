---!!! DO NOT MANUALLY EDIT THIS FILE !!!
---Generated by lua-doc-extractor 3.3.2
---https://github.com/rhys-vdw/lua-doc-extractor
---
---Source: rts/Lua/LuaMathExtra.cpp
---
---@meta

---math extensions
---
---Note: there are no bit shift. Use those Lua functions instead for 24 bits bitshift
---24 bits because only the 24 bits of the mantissa can be easily used in a 32 bit float
---bitshift functions (<<, >> equivalent)
---
---    -- left shift
---    local function lsh(value,shift)
---        return (value*(2^shift)) % 2^24
---    end
---
---    -- right shift
---    local function rsh(value,shift)
---        return math.floor(value/2^shift) % 2^24
---    end
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L13-L31" target="_blank">source</a>]
---
---@see rts/Lua/LuaMathExtra.cpp

---Returns the length of hypotenuse of right angle triangle with sides x and y,
---equivalent to `sqrt(x*x + y*y)`, but has better numerical stability and
---internally handles intermediate overflows/underflows, but is also slower.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L59-L68" target="_blank">source</a>]
---
---@param x number
---@param y number
---@return number `sqrt(x*x+y*y)`
function math.hypot(x, y) end

---Returns the length of the diagonal of an n-dimensional box (or the length of
---an n-component vector). Rather quick method that does not handle intermediate
---overflows/underflows nor is made for numerical stability.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L76-L85" target="_blank">source</a>]
---
---@param x number
---@param ... number
---@return number diagonal
function math.diag(x, ...) end

---Returns x clamped to min and max boundaries.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L99-L106" target="_blank">source</a>]
---
---@param value number
---@param min number
---@param max number
---@return number clamped
function math.clamp(value, min, max) end

---Returns 0 if x == 0, 1 if x > 0, -1 if x < 0
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L122-L127" target="_blank">source</a>]
---
---@param x number
---@return number sign
function math.sgn(x) end

---Returns linear interpolation between x and y with ratio a (x+(y-x)*a).
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L143-L150" target="_blank">source</a>]
---
---@param x number
---@param y number
---@param a number
---@return number (x+(y-x)*a)
function math.mix(x, y, a) end

---Returns x rounded to n decimals, if n is omitted or <=0, rounds to nearest
---integer. Note that Spring's Lua interpreter uses 32-bit floats for all
---numbers so max. precision is ~7 decimal digits.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L162-L171" target="_blank">source</a>]
---
---@param x number
---@param decimals number
---@return number rounded
function math.round(x, decimals) end

---Returns erf(x), the Gauss error function, between -1 and 1.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L195-L200" target="_blank">source</a>]
---
---@param x number
---@return number erf
function math.erf(x) end

---Applies the smoothstep function
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L208-L217" target="_blank">source</a>]
---
---Clamps and rescales v to a value between [0; 1] based on the edges and then applies the smoothstep function.
---For example math.smoothstep(10, 25, 15) is 0.259, because 15 is 0.333 of the way from 10 to 25, and smoothstep(0.333) is 0.259
---
---@param edge0 number
---@param edge1 number
---@param v number
---@return number smoothstep
function math.smoothstep(edge0, edge1, v) end

---Returns the normalize vector of an given vector.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L225-L231" target="_blank">source</a>]
---
---@param x number
---@param ... number
---@return number ... normalized
function math.normalize(x, ...) end

---Returns the bitwise OR of all arguments. Only use up to 24 bit integers.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L271-L276" target="_blank">source</a>]
---
---@param ... integer
---@return integer result
function math.bit_or(...) end

---Returns the bitwise AND of all arguments. Only use up to 24 bit integers.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L288-L293" target="_blank">source</a>]
---
---@param ... integer
---@return integer result
function math.bit_and(...) end

---Returns the bitwise XOR of all arguments. Only use up to 24 bit integers.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L305-L310" target="_blank">source</a>]
---
---@param ... integer
---@return integer result
function math.bit_xor(...) end

---Returns the bitwise NOT of the 24 bit integer argument.
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L322-L327" target="_blank">source</a>]
---
---@param value integer
---@return integer result
function math.bit_inv(value) end

---Set each of the bits of a 24 bit integer. Returns result = result OR (1 << a1) OR (1 << a2) OR ...;)
---
---[<a href="https://github.com/beyond-all-reason/RecoilEngine/blob/master/rts/Lua/LuaMathExtra.cpp#L336-L341" target="_blank">source</a>]
---
---@param ... integer
---@return integer result
function math.bit_bits(...) end